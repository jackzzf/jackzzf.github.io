<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jackzzf.github.io/</id>
    <title>Jack</title>
    <updated>2020-07-16T12:36:06.466Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jackzzf.github.io/"/>
    <link rel="self" href="https://jackzzf.github.io/atom.xml"/>
    <subtitle>Jack`Blog</subtitle>
    <logo>https://jackzzf.github.io/images/avatar.png</logo>
    <icon>https://jackzzf.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Jack</rights>
    <entry>
        <title type="html"><![CDATA[Dubbo && Zookeeper]]></title>
        <id>https://jackzzf.github.io/post/spring-boot-and-dubbo-and-zookeeper/</id>
        <link href="https://jackzzf.github.io/post/spring-boot-and-dubbo-and-zookeeper/">
        </link>
        <updated>2020-07-15T10:57:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-基础知识">一、基础知识</h1>
<h3 id="1-分布式系统">1. 分布式系统</h3>
<ul>
<li>分布式系统是若干独立计算机的集合，这些计算机对于用户来说就想单个相关系统；</li>
</ul>
<h4 id="11-系统架构发展演变">1.1 系统架构发展演变</h4>
<figure data-type="image" tabindex="1"><img src="https://jackzzf.github.io//post-images/1594811656109.jpg" alt="系统架构发展演变" loading="lazy"></figure>
<ol>
<li>单一应用架构</li>
</ol>
<ul>
<li>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(<strong>ORM</strong>)是关键。</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://jackzzf.github.io//post-images/1594812472004.jpg" alt="ORM" loading="lazy"></figure>
<ol start="2">
<li>垂直应用架构</li>
</ol>
<ul>
<li>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(<strong>MVC</strong>)是关键。</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://jackzzf.github.io//post-images/1594813971287.jpg" alt="MVC" loading="lazy"></figure>
<ol start="3">
<li>分布式服务架构</li>
</ol>
<ul>
<li>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(<strong>RPC</strong>)是关键。</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://jackzzf.github.io//post-images/1594814115419.jpg" alt="RPC" loading="lazy"></figure>
<ol start="4">
<li>流动计算架构</li>
</ol>
<ul>
<li>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(<strong>SOA</strong>)是关键。</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://jackzzf.github.io//post-images/1594814207659.jpg" alt="SOA" loading="lazy"></figure>
<h4 id="12-rpc">1.2 RPC</h4>
<ul>
<li>RPC【<strong>Remote Procedure Call</strong>】是指<strong>远程过程调用</strong>，是一种<strong>进程间通信</strong>方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://jackzzf.github.io//post-images/1594816132843.jpg" alt="RPC流程" loading="lazy"></figure>
<h3 id="2-dubbo-核心概念">2. Dubbo 核心概念</h3>
<ol>
<li>Apache Dubbo 是一款高性能、轻量级的开源Java RPC框架，它提供了<strong>三大核心</strong>能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</li>
<li>Dubbo 体系结构：<br>
<img src="https://jackzzf.github.io//post-images/1594816706005.jpg" alt="Dubbo 体系结构" loading="lazy"></li>
</ol>
<ul>
<li><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，提供者在启动时，向注册中心注册自己提供的服务；</li>
<li><strong>服务消费者（Consumer）</strong>：调用远程服务的服务消费方，消费者在启动时，向注册中心订阅自己所需的服务，还从提供者地址列表中，基于<strong>软负载均衡算法</strong>，选一台提供者进行调用，如果调用失败，再选用另一台调用；</li>
<li><strong>注册中心（Registry）</strong>：注册中心返回提供者地址列表给消费者，如果有变更，定时每分钟发送一次统计数据到监控中心；</li>
<li><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心；</li>
</ul>
<h3 id="3-dubbo-环境搭建">3. Dubbo 环境搭建</h3>
<h4 id="31-win安装zookeeper">3.1 win安装zookeeper</h4>
<pre><code class="language-java">1. 官网下载Zookeeper；
2. 将conf文件夹下的zoo_simple.cfg复制一份并改名为zoo.cfg；
3. zoo.cfg文件中的配置：
    dataDir=../data  // 临时数据存储目录（zoo.cfg所在文件夹的上一级目录下的data文件夹）
    clientPort=2181 // zookeeper的端口号
4. 修改完成后运行bin目录下的zkServer.cmd；
5. 运行bin目录下的zkCli.cmd进行测试；
</code></pre>
<h4 id="32-win安装dubbo-admin管理控制台">3.2 win安装dubbo-admin管理控制台</h4>
<pre><code class="language-java">1. 下载dubbo-admin：https://github.com/apache/incubator-dubbo-ops
2. 解压完成后，进入/dubbo-admin/src/main/resources/application.properties，修改配置：
    dubbo.registry.address=zookeeper://127.0.0.1:2181
3. 进入dubbo-admin目录，使用cmd命令：mvn clean package
4. 进入target目录下，使用cmd命运运行：java -jar dubbo-admin-0.0.1-SNAPSHOT.jar
5. 浏览器输入：localhost:7001，进入dubbo管理控制台，默认账号密码都是root；
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://jackzzf.github.io//post-images/1594902731955.jpg" alt="dubbo-admin" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://jackzzf.github.io/post/hello-gridea/</id>
        <link href="https://jackzzf.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>