<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jackzzf.github.io/</id>
    <title>Jack</title>
    <updated>2020-08-20T07:12:23.353Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jackzzf.github.io/"/>
    <link rel="self" href="https://jackzzf.github.io/atom.xml"/>
    <subtitle>Jack`Blog</subtitle>
    <logo>https://jackzzf.github.io/images/avatar.png</logo>
    <icon>https://jackzzf.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Jack</rights>
    <entry>
        <title type="html"><![CDATA[valueOf () 方法]]></title>
        <id>https://jackzzf.github.io/post/valueof-fang-fa/</id>
        <link href="https://jackzzf.github.io/post/valueof-fang-fa/">
        </link>
        <updated>2020-08-20T07:08:54.000Z</updated>
        <content type="html"><![CDATA[<p>valueOf () 方法有以下几种不同形式：</p>
<ul>
<li>
<p><code>valueOf(boolean b)</code>: 返回 boolean 参数的字符串表示形式。.</p>
</li>
<li>
<p><code>valueOf(char c)</code>: 返回 char 参数的字符串表示形式。</p>
</li>
<li>
<p><code>valueOf(char[] data)</code>: 返回 char 数组参数的字符串表示形式。</p>
</li>
<li>
<p><code>valueOf(char[] data, int offset, int count)</code>: 返回 char 数组参数的特定子数组的字符串表示形式。</p>
</li>
<li>
<p><code>valueOf(double d)</code>: 返回 double 参数的字符串表示形式。</p>
</li>
<li>
<p><code>valueOf(float f)</code>: 返回 float 参数的字符串表示形式。</p>
</li>
<li>
<p><code>valueOf(int i)</code>: 返回 int 参数的字符串表示形式。</p>
</li>
<li>
<p><code>valueOf(long l)</code>: 返回 long 参数的字符串表示形式。</p>
</li>
<li>
<p><code>valueOf(Object obj)</code>: 返回 Object 参数的字符串表示形式。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[charAt()方法]]></title>
        <id>https://jackzzf.github.io/post/charatfang-fa/</id>
        <link href="https://jackzzf.github.io/post/charatfang-fa/">
        </link>
        <updated>2020-08-20T02:00:17.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><code>charAt()</code> 方法用于返回指定索引处的字符。索引范围为从 <code>0</code> 到 <code>length()-1</code>。</li>
</ul>
<pre><code class="language-java">public char charAt(int index)       // index为字符的索引
</code></pre>
<ul>
<li>实例：</li>
</ul>
<pre><code class="language-java">public class Main{
    public static void main(String[] args) {
        String s = &quot;www.jack.com&quot;;
        char c = s.charAt(5);
        System.out.print(c);
    }
}

// 输出结果为：a
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[将十进制转换成2/8/16进制]]></title>
        <id>https://jackzzf.github.io/post/jiang-shi-jin-zhi-zhuan-huan-cheng-2816-jin-zhi/</id>
        <link href="https://jackzzf.github.io/post/jiang-shi-jin-zhi-zhuan-huan-cheng-2816-jin-zhi/">
        </link>
        <updated>2020-08-20T01:49:56.000Z</updated>
        <content type="html"><![CDATA[<p>Integer 类中有静态方法：</p>
<ul>
<li>toBinaryString（int i）：返回 int 变量的二进制表示的字符串。</li>
<li>toHexString（int i）    ：返回 int 变量的 16 进制字符串。</li>
<li>toOctalString（int i）  ：返回 int 变量的 8 进制表示字符串。</li>
</ul>
<p>具体用法：</p>
<ul>
<li>以 toBinaryString（int i）为例，将整数 n 转换成字符串（二进制）。</li>
</ul>
<pre><code class="language-java">String str = Integer.toBinaryString(n);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[华为机试题]]></title>
        <id>https://jackzzf.github.io/post/hua-wei-ji-shi-ti/</id>
        <link href="https://jackzzf.github.io/post/hua-wei-ji-shi-ti/">
        </link>
        <updated>2020-08-20T00:45:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-取近似值">1. 取近似值</h3>
<blockquote>
<p>写出一个程序，接受一个正浮点数值，输出该数值的近似整数值。如果小数点后数值大于等于 5, 向上取整；小于 5，则向下取整。</p>
</blockquote>
<pre><code class="language-java">public class Main() {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextDouble) {
            double l = sc.nextDouble();
            System.out.println(Math.round(l));
        }
    }
}
</code></pre>
<h3 id="2-求int型数据在内存中存储时1的个数">2. 求int型数据在内存中存储时1的个数</h3>
<blockquote>
<p>输入一个 int 型的正整数，计算出该 int 型数据在内存中存储时 1 的个数。</p>
</blockquote>
<pre><code class="language-java">import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        String s = Integer.toBinaryString(num);
        num = 0;
        for(int i = 0; i &lt; s.length(); i++) {
            if(s.charAt(i) == '1') {
                num++;
            }
        }
        System.out.println(num);
    }
}
</code></pre>
<h3 id="3-数字颠倒">3. 数字颠倒</h3>
<blockquote>
<p>输入一个整数，将这个整数以字符串的形式逆序输出，程序不考虑负数的情况，若数字含有 0，则逆序形式也含有 0，如输入为 100，则输出为 001</p>
</blockquote>
<pre><code class="language-java">import java.util.Scanner;
import java.lang.String;

public class Main{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        String res = &quot;&quot;;
        
        while(num!=0) {
            int t1=num%10;
            int t2=num/10;
            res+=String.valueOf(t1);
            num=t2;
        }
        System.out.println(res);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 navicat 连接 Linux 的 mysql 出现的 1251 错误代码]]></title>
        <id>https://jackzzf.github.io/post/shi-yong-navicat-lian-jie-linux-de-mysql-chu-xian-de-1251-cuo-wu-dai-ma/</id>
        <link href="https://jackzzf.github.io/post/shi-yong-navicat-lian-jie-linux-de-mysql-chu-xian-de-1251-cuo-wu-dai-ma/">
        </link>
        <updated>2020-08-10T01:39:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="使用-navicat-连接-linux-的-mysql-出现的-1251-错误代码">使用 navicat 连接 Linux 的 mysql 出现的 1251 错误代码</h3>
<ol>
<li>首先进入容器</li>
</ol>
<pre><code class="language-shell">docker exec -it mysql01 bash  (mysql01为容器名)
</code></pre>
<ol start="2">
<li>登陆mysql</li>
</ol>
<pre><code class="language-mysql">mysql -u root -p
Enter password:
</code></pre>
<ol start="3">
<li>修改加密规则</li>
</ol>
<pre><code class="language-mysql">use mysql;

# 最后引号是密码，%代表任意ip，也可修改为某个ip
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';

# 刷新权限表
flush privileges;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[访问Tomcat容器报错解决办法]]></title>
        <id>https://jackzzf.github.io/post/fang-wen-tomcat-rong-qi-bao-cuo-jie-jue-ban-fa/</id>
        <link href="https://jackzzf.github.io/post/fang-wen-tomcat-rong-qi-bao-cuo-jie-jue-ban-fa/">
        </link>
        <updated>2020-08-10T01:38:06.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>启动Tomcat容器</li>
</ul>
<pre><code class="language-shell">docker run -d -p 8888:8080 tomcat
</code></pre>
<ul>
<li>查看已启用的容器</li>
</ul>
<pre><code class="language-shell">docker ps
</code></pre>
<ul>
<li>查看防火墙状态</li>
</ul>
<pre><code class="language-shell">service firewalld status
</code></pre>
<ul>
<li>若开启，则关闭</li>
</ul>
<pre><code class="language-shell">service firewalld stop
</code></pre>
<ul>
<li>此时再访问还是报错：则说明webapps文件夹里面没有内容</li>
</ul>
<pre><code class="language-shell">docker exec -it 容器id /bin/bash

ls -l

cd webapps

ls -l

# 文件夹内没有内容，显示total 0

cd ..

rm -rf webapps

mv webapps.dist webapps

# 此时访问即可
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu常用命令]]></title>
        <id>https://jackzzf.github.io/post/ubuntu-chang-yong-ming-ling/</id>
        <link href="https://jackzzf.github.io/post/ubuntu-chang-yong-ming-ling/">
        </link>
        <updated>2020-08-03T02:20:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-deb文件安装">1. deb文件安装</h3>
<ul>
<li>sudo dpkg -i &lt;deb文件名&gt;</li>
</ul>
<h3 id="2-授予最高权限">2. 授予最高权限</h3>
<ul>
<li>chmod -R 777 &lt;文件夹路径&gt;</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu更换镜像源]]></title>
        <id>https://jackzzf.github.io/post/ubuntu-geng-huan-jing-xiang-yuan/</id>
        <link href="https://jackzzf.github.io/post/ubuntu-geng-huan-jing-xiang-yuan/">
        </link>
        <updated>2020-07-29T06:17:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-查看源模板">1. 查看源模板</h3>
<ul>
<li>进入此网站<code>https://wiki.ubuntu.org.cn/%E6%A8%A1%E6%9D%BF:18.04source</code>，查看源模板；</li>
</ul>
<h3 id="2-获取-ubuntu-代号">2. 获取 Ubuntu 代号</h3>
<ul>
<li>终端输入，Codename 后面的就是代号；</li>
</ul>
<pre><code class="language-java">lsb_release -a
</code></pre>
<pre><code class="language-java">No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.4 LTS
Release:	    18.04
Codename:	    bionic
</code></pre>
<h3 id="3-编辑源">3. 编辑源</h3>
<ul>
<li>将途中<strong>蓝色连接</strong>换为对应的阿里云或者清华源，并将每个连接后面的<strong>代号</strong>换为自己系统对应的代号</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://jackzzf.github.io//post-images/1596004797979.jpg" alt="镜像源" loading="lazy"></figure>
<h3 id="4-修改源文件-sourceslist">4. 修改源文件 sources.list</h3>
<ul>
<li>先备份源文件</li>
</ul>
<pre><code class="language-java">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bcakup
</code></pre>
<ul>
<li>使用gedit编辑源文件，清空里面内容，并将第3步中编辑好的源代码复制进去，保存并退出；</li>
</ul>
<pre><code class="language-java">sudo gedit /etc/apt/sources.list
</code></pre>
<h3 id="5-更新软件列表和升级">5. 更新软件列表和升级</h3>
<pre><code class="language-java">// 更新软件列表
sudo apt-get update
// 更新软件
sudo apt-get upgrade
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[spring--静态/动态代理模式]]></title>
        <id>https://jackzzf.github.io/post/spring-jing-tai-dong-tai-dai-li-mo-shi/</id>
        <link href="https://jackzzf.github.io/post/spring-jing-tai-dong-tai-dai-li-mo-shi/">
        </link>
        <updated>2020-07-21T09:10:27.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>静态代理</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://jackzzf.github.io//post-images/1595322736529.jpg" alt="静态代理" loading="lazy"></figure>
<ul>
<li>抽象角色：一般使用接口或者抽象类来实现；</li>
<li>真实角色：被代理的角色；</li>
<li>代理角色：代理真实角色，代理真实角色后，一般会做一些附属的操作；</li>
<li>客户：使用代理角色来进行一些操作；</li>
</ul>
<pre><code class="language-java">// 租房：抽象角色
public interface Rent {
    public void rent();
}

// 房东：真实角色
public class Host implements Rent {
    // 房东要出租房屋
    public void rent() {
        System.out.pringtln(&quot;房屋出租&quot;);
    }
} 

// 中介：代理角色
public class Proxy implements Rent {
    public Host host;
    public Proxy() {}
    public Proxy(Host host) {
        this.host = host;
    }

    // 租房
    public void rent() {
        seeHouse();
        host.rent();
        fare();
    }

    // 看房
    public void seeHouse() {
        System.out.pringln(&quot;带房客看房&quot;);
    }

    // 收中介费
    public void fare() {
        System.out.pringln(&quot;收中介费&quot;);
    }
}

// 客户：一般客户都会去找代理
public class Client {
    public static void main(String[] args) {
        // 房东要出租房
        Host host = new Host();
        // 中介帮助房东
        Proxy proxy = new Proxy(host);

        // 客户去找中介租房
        proxy.rent();
    }
}
</code></pre>
<ul>
<li>静态代理再理解</li>
</ul>
<pre><code class="language-java">// 抽象角色：增删改查业务
public interface UserService() {
    void add();
    ......
}

// 真实角色：完成增删改查操作的人
public class UserServiceImpl implements UserServicec {
    public void add() {
        System.out.println(&quot;增加了一个用户&quot;);
    }
    ......
}

// 代理角色：增加日志功能
public class UserServiceProxy implements UserService {
    private UserServiceImpl userService;

    public void setUserService(UserServiceImpl userService) {
        this.userService = userService;
    }

    public void add() {
        log(&quot;add&quot;);
        userService.add();
    }
    ......

    public void log(String msg) {
        System.out.println(&quot;执行了&quot;+msg+&quot;方法&quot;);
    }
}

// 测试：
public class Client {
    public static void main(String[] args) {
        // 真实业务
        UserServiceImpl userService = new UserServiceImpl();
        // 代理类
        UserServiceProxy proxy = new UserServiceProxy();
        // 使用代理
        proxy.setUserService(userService);

        proxy.add();
    }
}
</code></pre>
<p>AOP：纵向开发，横向开发<br>
<img src="https://jackzzf.github.io//post-images/1595400253809.jpg" alt="" loading="lazy"></p>
<ol start="2">
<li>动态代理</li>
</ol>
<ul>
<li>动态代理的代理类是动态生成的。静态代理的代理类是我们提前写好的；</li>
<li>动态代理分为两类：一种是基于接口动态代理，一种是基于类的动态代理
<ul>
<li>基于接口的动态代理：JDK动态代理</li>
<li>基于类的动态代理：cglib</li>
</ul>
</li>
</ul>
<p><code>InvocationHandler</code>：调用处理程序</p>
<pre><code class="language-java">Object invoke(Object proxy, 方法 method, Object[] args);
// proxy - 调用该方法的代理实例
// method - 所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。
// args - 包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。
</code></pre>
<p><code>Proxy</code>：代理</p>
<pre><code class="language-java">// 生成代理类
public Object getProxy(){
   return Proxy.newProxyInstance(this.getClass().getClassLoader(),
                                 rent.getClass().getInterfaces(),this);
}
</code></pre>
<pre><code class="language-java">//抽象角色：租房
public interface Rent {
   public void rent();
}

//真实角色: 房东，房东要出租房子
public class Host implements Rent{
   public void rent() {
       System.out.println(&quot;房屋出租&quot;);
   }
}

// 代理角色：ProxyInvocationHandler
public class ProxyInvocationHandler implements InvocationHandler {
    private Rent rent;
    public void setRent(Rent rent) {
        this.rent = rent;
    }

    /*
        生成代理类：重点第二个参数：获取要代理的抽象角色，之前都是一个角色，现在可以代理一类角色；
    */ 
    public Object getProxy(){
       return Proxy.newProxyInstance(this.getClass().getClassLoader(),
               rent.getClass().getInterfaces(),this);
    }

    /*
        proxy : 代理类
        method : 代理类的调用处理程序的方法对象
        处理代理实例上的方法调用并返回结果
    */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) {
        seeHouse();
        // 核心：本质利用反射实现！
        Object result = method.invoke(rent, args);
        fare();
        return result;
    }

    // 看房
   public void seeHouse(){
       System.out.println(&quot;带房客看房&quot;);
   }
   // 收中介费
   public void fare(){
       System.out.println(&quot;收中介费&quot;);
   }
}

// 客户：租客
public class Test {
   public static void main(String[] args) {
       // 真实角色
       Host host = new Host();
       // 代理实例的调用处理程序
       ProxyInvocationHandler pih = new ProxyInvocationHandler();
       // 将真实角色放进去
       pih.setRent(host);
       // 动态生成对应的代理类
       Rent proxy = (Rent) pih.getProxy();
       proxy.rent();
   }
}
</code></pre>
<ul>
<li>动态代理深理解</li>
</ul>
<pre><code class="language-java">
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dubbo && Zookeeper]]></title>
        <id>https://jackzzf.github.io/post/spring-boot-and-dubbo-and-zookeeper/</id>
        <link href="https://jackzzf.github.io/post/spring-boot-and-dubbo-and-zookeeper/">
        </link>
        <updated>2020-07-15T10:57:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-基础知识">一、基础知识</h1>
<h3 id="1-分布式系统">1. 分布式系统</h3>
<ul>
<li>分布式系统是若干独立计算机的集合，这些计算机对于用户来说就想单个相关系统；</li>
</ul>
<h4 id="11-系统架构发展演变">1.1 系统架构发展演变</h4>
<figure data-type="image" tabindex="1"><img src="https://jackzzf.github.io//post-images/1594811656109.jpg" alt="系统架构发展演变" loading="lazy"></figure>
<ol>
<li>单一应用架构</li>
</ol>
<ul>
<li>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(<strong>ORM</strong>)是关键。</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://jackzzf.github.io//post-images/1594812472004.jpg" alt="ORM" loading="lazy"></figure>
<ol start="2">
<li>垂直应用架构</li>
</ol>
<ul>
<li>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(<strong>MVC</strong>)是关键。</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://jackzzf.github.io//post-images/1594813971287.jpg" alt="MVC" loading="lazy"></figure>
<ol start="3">
<li>分布式服务架构</li>
</ol>
<ul>
<li>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(<strong>RPC</strong>)是关键。</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://jackzzf.github.io//post-images/1594814115419.jpg" alt="RPC" loading="lazy"></figure>
<ol start="4">
<li>流动计算架构</li>
</ol>
<ul>
<li>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(<strong>SOA</strong>)是关键。</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://jackzzf.github.io//post-images/1594814207659.jpg" alt="SOA" loading="lazy"></figure>
<h4 id="12-rpc">1.2 RPC</h4>
<ul>
<li>RPC【<strong>Remote Procedure Call</strong>】是指<strong>远程过程调用</strong>，是一种<strong>进程间通信</strong>方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://jackzzf.github.io//post-images/1594816132843.jpg" alt="RPC流程" loading="lazy"></figure>
<h3 id="2-dubbo-核心概念">2. Dubbo 核心概念</h3>
<ol>
<li>Apache Dubbo 是一款高性能、轻量级的开源Java RPC框架，它提供了<strong>三大核心</strong>能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</li>
<li>Dubbo 体系结构：<br>
<img src="https://jackzzf.github.io//post-images/1594816706005.jpg" alt="Dubbo 体系结构" loading="lazy"></li>
</ol>
<ul>
<li><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，提供者在启动时，向注册中心注册自己提供的服务；</li>
<li><strong>服务消费者（Consumer）</strong>：调用远程服务的服务消费方，消费者在启动时，向注册中心订阅自己所需的服务，还从提供者地址列表中，基于<strong>软负载均衡算法</strong>，选一台提供者进行调用，如果调用失败，再选用另一台调用；</li>
<li><strong>注册中心（Registry）</strong>：注册中心返回提供者地址列表给消费者，如果有变更，定时每分钟发送一次统计数据到监控中心；</li>
<li><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心；</li>
</ul>
<h3 id="3-dubbo-环境搭建">3. Dubbo 环境搭建</h3>
<h4 id="31-win安装zookeeper">3.1 win安装zookeeper</h4>
<pre><code class="language-java">1. 官网下载Zookeeper；
2. 将conf文件夹下的zoo_simple.cfg复制一份并改名为zoo.cfg；
3. zoo.cfg文件中的配置：
    dataDir=../data  // 临时数据存储目录（zoo.cfg所在文件夹的上一级目录下的data文件夹）
    clientPort=2181 // zookeeper的端口号
4. 修改完成后运行bin目录下的zkServer.cmd；
5. 运行bin目录下的zkCli.cmd进行测试；
</code></pre>
<h4 id="32-win安装dubbo-admin管理控制台">3.2 win安装dubbo-admin管理控制台</h4>
<pre><code class="language-java">1. 下载dubbo-admin：https://github.com/apache/incubator-dubbo-ops
2. 解压完成后，进入/dubbo-admin/src/main/resources/application.properties，修改配置：
    dubbo.registry.address=zookeeper://127.0.0.1:2181
3. 进入dubbo-admin目录，使用cmd命令：mvn clean package
4. 进入target目录下，使用cmd命运运行：java -jar dubbo-admin-0.0.1-SNAPSHOT.jar
5. 浏览器输入：localhost:7001，进入dubbo管理控制台，默认账号密码都是root；
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://jackzzf.github.io//post-images/1594902731955.jpg" alt="dubbo-admin" loading="lazy"></figure>
]]></content>
    </entry>
</feed>